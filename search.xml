<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何下载美区 App Store 的应用</title>
    <url>/posts/97852533/</url>
    <content><![CDATA[<p>简单折腾一下 iPhone 的科学上网方式，以下仅记录期间会遇到的麻烦的点，对于在哪个网站注册 App Store ID 这种问题不过多描述。</p>
<span id="more"></span>

<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>官网注册即可，需要注意的点就是地区记得选 United States 就行，电话不是没关系。</p>
<h3 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h3><p>注册美区 ID 之后，你点进去 App Store 也是不能用的，它会让你完善付款方式，<br>下面要做的就是如果在没有 PayPal 和信用卡这些付款方式的情况下可以通过充值的方式来购买应用或者下载其他免费应用。</p>
<ol>
<li>打开手机设置，点击头像进入 Apple ID 个人页面这个一级页面</li>
<li>点击付款与配送，如果你没有付款方式，它会直接给你跳到三级页面 <strong>添加付款方式</strong></li>
<li>不用管，你直接点左上角回到二级页面 <strong>付款与配送</strong>，点击下面的 <strong>添加配送地址</strong></li>
<li>打开 <a href="https://www.meiguodizhi.com/">美国地址生成器</a> 或者其他类似的网站</li>
<li>在中间的输入框中输入 <strong>俄勒冈州</strong> 之后再点生成地址 (如果是其他州的话，购买需要税，比如我要买一个 $2.99，余额有 $3.00，但因为收税也会提示余额不足)</li>
<li>把生成的美区地址填到刚打开那个添加配送地址的页面当中并保存</li>
<li>[可选]通过你的方式进行充值（推荐下方说的支付宝充值）</li>
<li>现在可以下载你需要的应用了。</li>
</ol>
<h3 id="充值"><a href="#充值" class="headerlink" title="充值"></a>充值</h3><p>以前都是用的某宝代充值，其实支付宝里面就有了。</p>
<ol>
<li>打开支付宝，左上角地址切换美国任意州</li>
<li>底部菜单中间会多出一个 <strong>出境</strong>，</li>
<li>点进出境后，中间会有一个 <strong>折扣礼卡</strong></li>
<li>点进折扣礼卡，拉到最下面有一个 <strong>更多大牌折扣礼卡</strong></li>
<li>点进去后会进入另一个页面，顶部搜索框搜索 <strong>itunes</strong></li>
<li>搜索结果第一个就是 <strong>App Store &amp; iTunes US</strong>，可以填入 $2~500 美元进行充值(这里如果没有账户的话会让你注册，这个注册没什么门槛，填一下就行)</li>
<li>充值后在我的订单里面找到刚才的订单，点进去复制礼品码</li>
<li>打开 App Store，点开头像-兑换充值卡或者代码。</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>App Store</tag>
      </tags>
  </entry>
  <entry>
    <title>使用多邻国学习英语</title>
    <url>/posts/31b0970a/</url>
    <content><![CDATA[<p>内容整理自我在知乎的一个回答 <a href="https://www.zhihu.com/question/269694713/answer/3472050331">多邻国（英语）通关后大致是什么水平？</a>，希望能够给其他正在使用多邻国的人带来帮助。</p>
<span id="more"></span>

<h2 id="使用多邻国能够学到什么程度？"><a href="#使用多邻国能够学到什么程度？" class="headerlink" title="使用多邻国能够学到什么程度？"></a>使用多邻国能够学到什么程度？</h2><p>前段时间多邻国更新了客户端内的评级分数，具体的表格如下（我目前还在 A2 靠近 B1 初级）</p>
<ul>
<li>00-10：入门级 A1</li>
<li>10-20：初级 A1</li>
<li>20-30：高级 A1</li>
<li>30-60：A2</li>
<li>60-80：初级 B1</li>
<li>80-100：高级 B1</li>
<li>100-115：初级 B2</li>
<li>115-130：高级 B2</li>
<li>130-160（未上线）：C1 - C2</li>
</ul>
<p>而如果按照英语学英语里面的内容来看，则是直接从 B1 开始，也就是 50-160。</p>
<p>有需要的朋友可以根据自己的需要选择学习的起点。</p>
<p>Duolingguo 国际官网有过相关的问题的回答 —— <a href="https://support.duolingo.com/hc/en-us/articles/360056797071-Can-you-become-fluent-with-Duolingo">Can you become fluent with Duolingo?</a> —— 里面提到的是正在开发 B2，也就是说目前还没有 B2。</p>
<blockquote>
<p>At Duolingo, we’re developing our courses to get you to a level called <a href="https://www.coe.int/en/web/common-european-framework-reference-languages/level-descriptions">B2</a>, at which you can get a job in the language you’re studying.</p>
</blockquote>
<p>官网的回答还提到：</p>
<blockquote>
<p>As it turns out, many speakers don’t need to use C1 or C2 vocabulary and grammar, even in their first language.</p>
</blockquote>
<p>意思大概是：C1、C2 的语法和词汇即使在母语里大多数人也不会用到的。</p>
<p>综合的来看，即便是出国和外国人全英文环境交流，B2 也是完全够用了，B1 大多数生活场景也没啥问题，C1、C2 除非你搞学术研究否则没必要。</p>
<p>此外，个人认为学习语言不仅仅是一个词汇和语法的问题，所谓流利英语还要说的流利，听得清晰，学习过程千万不要当哑巴！大声读出来！！！</p>
<h2 id="个人学习记录"><a href="#个人学习记录" class="headerlink" title="个人学习记录"></a>个人学习记录</h2><h3 id="学习起点"><a href="#学习起点" class="headerlink" title="学习起点"></a>学习起点</h3><p>个人英语的水平：</p>
<ul>
<li>词汇量： 700-800 左右？</li>
<li>语法：0.5 基础？</li>
</ul>
<p>PS：感觉我这个回答还可以放到“程序员需要多好的英语？”这一类问题下作为说明案例。</p>
<p>词汇量是以前上学的时候老师各种抽查下强迫着背下来，然后用好像是百词斩还是什么背单词的软件测出来的，这个词汇量估计也就是初一初二吧？至于过去几年了还剩多少我就不清楚了。</p>
<p>语法基本零基础，不同于词汇，语法是没办法强行背诵抽查，所以我语法白到什么程度呢？</p>
<p>在开始学多领国之前，你如果问我“他是一个老师吗？”怎么翻译，我会说“he is a teacher?”，你没看错，我只是在后面加了一个问号（最多语气上在有一些不一样。。。）</p>
<p>当然现在我知道是“Is he a teacher?”了。</p>
<p>如果你有看过语法书的目录，例如《剑桥英语在用》初级的，你会发现这个语法基本就是在最前面几个知识点里。。。所以我说我语法零基础一点都不夸张。。。</p>
<p>PS：建议多邻国和语法书一起看，或者说你在学多邻国的时候脑子里出现 “ 为啥这个句子这么写？” 的时候一定要查一下语法书。</p>
<p>目前的学习体验来说，很上瘾，有几百词汇量的前提下，前面两个部分应该不难，大多数我的情况就是，语法不断地犯错，但又不断地纠正。</p>
<p>很容易坚持，我认为这就是最大的优点，不得不说他们把反馈玩会了，几秒一个反馈</p>
<p>也挺好玩，像是配词乐（限时配对中英文）、闪回测试（限时回答问题），真就有时候玩上瘾了。。。</p>
<p>然后排行榜，emmm 有时候不得不说争强好胜是本能，嘴里说着不较劲，但看到别人分数超上来了，我就。。。</p>
<p>来来来！看我今天不卷死你！！！</p>
<p>其他像是新概念我试过，学了不到一周感觉我就不想学了，没有反馈啊，科学的讲，人想要持续做一件事情，除了因为某些事情而有了强大的自驱力，其他那就只能是靠正反馈了。</p>
<p>也尝试过阅读《书虫》，故事看起来挺有意思所以多坚持了一段时间，但还是缺少反馈，很多时候就是凭借着几百词汇量硬猜剧情，所以语法什么的基本还是 0 基础，读到一级过半还是不会造句，后面就忘了坚持了。。。</p>
<p>PS：注意了，以上体验仅在开通会员的前提下，没有开会员的话会有很多限制，体力有限，多错几个就没体力了（可以通过重复练习以前来回复，但感觉还是不爽），广告限制，每一个小单元完成都有几秒广告，挑战限制，也就是配对和闪回需要花宝石，这玩意目前好像挺难拿到的？所以如果想要有比较好的学习体验，找一下朋友拼一下家庭套装。（或者其他方式拿到会员，不多说了）</p>
<h3 id="2024-05-10"><a href="#2024-05-10" class="headerlink" title="2024.05.10"></a>2024.05.10</h3><p>目前快一个月了，还是觉得很有意思，进度第二阶段 14/28，其实原本是 10/16，但某一天多邻国突然更新了一下课程，哎嘿，从 16 部分变成 28 部分了是怎么回事。。。</p>
<p>说回学习，比较明显的改变就是在生活场景下已经能够简单的造句了，关键是比较自然，就是造句的时候没那么多的思考，很自然的就说出来了（我是说简单句啦）。</p>
<p>像是什么</p>
<p>“Do you know those girl with black hair?”</p>
<p>“Does he like to cook?”</p>
<p>的简单句子以前我都写不出来，现在写的就很自然。（再次说明我英语基础是有多差了）</p>
<p>对于单词的掌握也很有用，明明也没有说反反复复的背，但莫名其妙就会用了，验证了我以前看到过的一个学单词的理论：</p>
<p>单词要放到句子里学，而不是反复背诵。</p>
<p>此时此刻感觉自己牛的一批，然后看了一眼四级真题。。。好吧，我继续努力。</p>
<p>个人建议和剑桥英语在用的初中级两本语法结合，就偶尔翻一下语法书大概知道一下点，然后在多邻国里不断巩固。</p>
<p>另外听力题和发音题不要关了，读出来，读多了真的会自信很多。</p>
<p>学习起点</p>
<p>正在学，一周过去，现在学到第二阶段第四部分，mark 一下以后不定时回答这个问题。</p>
<p>目前个人英语的水平：</p>
<p>词汇量： 700-800 左右？</p>
<p>语法：0.5 基础？</p>
<p>PS：感觉我这个回答还可以放到“程序员需要多好的英语？”这一类问题下作为说明案例。</p>
<p>词汇量是以前上学的时候老师各种抽查下强迫着背下来，然后用好像是百词斩还是什么背单词的软件测出来的，这个词汇量估计也就是初一初二吧？至于过去几年了还剩多少我就不清楚了。</p>
<p>语法基本零基础，不同于词汇，语法是没办法强行背诵抽查，所以我语法白到什么程度呢？</p>
<p>在开始学多领国之前，你如果问我“他是一个老师吗？”怎么翻译，我会说“he is a teacher?”，你没看错，我只是在后面加了一个问号（最多语气上在有一些不一样。。。）</p>
<p>当然现在我知道是“Is he a teacher?”了。</p>
<p>如果你有看过语法书的目录，例如《剑桥英语在用》初级的，你会发现这个语法基本就是在最前面几个知识点里。。。所以我说我语法零基础一点都不夸张。。。</p>
<h3 id="2024-05-20"><a href="#2024-05-20" class="headerlink" title="2024.05.20"></a>2024.05.20</h3><p>今天使用网页版多邻国的时候发现一个事情，网页版听力练习比手机版多了精听的支持，因为网页版听力题可以切换为按键输入而不是选单词填空。</p>
<p>这其中有非常大的差异，比如说有一个题目你已经做过了，之后再次听的时候其实你并没有听清楚句子，但使用选词填空的模式你会根据做过的记忆直接选词。（泛听？）</p>
<p>而键盘输入你必须明确你听到的是什么句子，包括单数复数，不规则动词之类的，等等都需要你明确（精听？）</p>
<p>从选词换成键盘输入之后，简单做了半个小时题目，准确率一下子从选词的 95% 以上降低到 50% 都不到，但对应的的到了更多的锻炼。</p>
<h3 id="2024-06-04"><a href="#2024-06-04" class="headerlink" title="2024.06.04"></a>2024.06.04</h3><p>评论有朋友好奇我是否还在坚持，还在学，目前进度第三阶段 8/25。</p>
<p>顺便说一下晚上发生的事情，晚饭的时候去汉堡王吃恰好有个外国人正在点餐，但他不怎么会中文，然后有个旁人正在和他交流帮他，这时候两个月的学习成果就出现了，尽管我没能听清楚他们说的每个单词，但确大致能够明白交流的内容，大意是店里没有土豆泥（我只听懂 potatoes，猜的土豆泥），店员问他要不要更换成薯条。</p>
<p>当时脑海里小小幻想了一下，正在帮助他的是我。好吧，在“听”和“说”还不够熟练的情况下，我应该是不敢的——怂。</p>
<p>说回正题，实际上，按照我的想法，如果在使用多邻国的时候觉得是需要“坚持”的，那可能这个应用并不一定适合你，有的人会觉得这种闯关式的学习很无聊。</p>
<p>但对我而言恰好合适，所以将近两个月时间里，每天都很自然的拿起来学。在学习的时候也不那么功利的想要尽快闯关，而是适当的想象自己处于某个场景下，所以并不枯燥。</p>
<h3 id="2024-06-30"><a href="#2024-06-30" class="headerlink" title="2024.06.30"></a>2024.06.30</h3><p>上周经过一些竞争，拿下钻石榜一的成就，结果本周的学习时长大概就之前的一半。</p>
<p>有时候不得不承认竞争会让我学的时长更多（良性竞争）</p>
<p>好在即便不在想这个排名了，也没有产生“没意思了，不想学了”的情绪。区别只是每天一个小时还是两个小时的差异。</p>
<p>话说好像还没有结束，还有一个什么钻石锦标赛来着，不知道怎么时候开始。</p>
<h3 id="2024-07-16"><a href="#2024-07-16" class="headerlink" title="2024.07.16"></a>2024.07.16</h3><p>目前进度第三阶段 21/25，昨天重新去回头看了一下《书虫》1 级，感觉大不一样，回想起来以前刚开始看，磕磕碰碰的，还都忽略了时态等重要信息，单纯就是靠把几个认识的单词瞎组合在一起脑补出来的故事，只能算是囫囵吞枣的看了个梗概。。。</p>
<h3 id="2024-08-04"><a href="#2024-08-04" class="headerlink" title="2024.08.04"></a>2024.08.04</h3><p>目前进度第四阶段 8/55</p>
<p>今天 3.5w 分拿下钻石锦标赛的第一，如果不是和我一样有强迫症，必须要拿一次第一的话，其实最好还是不要碰这些排行榜，期间真的很容易上头，然后会有很多无意义的刷分行为，甚至为了快一点，会把听力和口语全都关了跳过，还好只是这一周，不然恐怕会失去兴趣了。。。</p>
<p>好在已经拿到了，从此之后不再关注任何分数和排行榜，专注做好每一个题目，不赶进度，以慢为快，目前个人在每天学习多邻国的前提下考虑新增一些计划：</p>
<p>周一、周三听力精听，鉴于目前听力和词汇量水平有限，暂时还是以 app 内的专项练习作为听力材料，后续可能考虑听生活美剧。</p>
<p>周二、周四口语专练，具体就是自己想一个场景或者就从多领国前面的找，然后自己想对话出来，以及一些生活美剧，后续考虑去 OmeTV 这一类和别人对线（：</p>
<p>周五、周六语法专练，使用教材为《剑桥英语再用》的初级和中级</p>
<h3 id="2024-08-05"><a href="#2024-08-05" class="headerlink" title="2024.08.05"></a>2024.08.05</h3><p>今天比较特殊，算是使用多领国以来完全不在意分数和排名的一天（没有关排行）。</p>
<p>我发现并没有想象中的那种失去目标后的索然无味</p>
<p>恰恰相反的是我开始体会起学习过程中的趣味性，甚至自己开始创造一些趣味性。</p>
<p>一个 6 小节的单元，学了将近一小时，心态从之前的赶进度或者“趁着双倍多要点分”的做题心态调整为认真对待每一题，比如说指路：</p>
<p>“Can you show me the directions to the airport？”</p>
<p>之前我会迅速看一次题目然后快速点选答案，而在调整心态之后，我会在脑海里大概想象一下现实中我在附近闲逛，然后有人找我用英语询问某个地点，借此和现实生活联系起来</p>
<p>“Can you show me the directions to the CHAGEE（霸王茶姬）?”</p>
<p>（刚好当时想喝奶茶来着。。。）</p>
<p>回答的时候也不急着看 app 提供的答案，而是按照自己学过的内容，先自己试试看怎么回答（同样为了和现实产生联系，假设自己在某个现实中的地点要指路去另一个地点）。</p>
<p>PS：如果你是和我一样的成就强迫症患者，必须要那个锦标赛第一的徽章否则每次看到排行榜就难受的话，有一个小技巧，锦标赛不是分为资格赛和后面三轮吗，但实际上后面三个随便一个拿到第一，显示的都是锦标赛第一，所以完全可以在第一轮的时候多拼一点，大多数这一轮还不会很卷。</p>
<p>PPS：如果你是必须要决赛第一才念头通达，那就要一点刷分技巧。。。这点就不过多讨论了。。。</p>
<h3 id="2024-10-09"><a href="#2024-10-09" class="headerlink" title="2024.10.09"></a>2024.10.09</h3><p>进度第四阶段 20/55</p>
<p>进度看起来比较缓慢，但不要在意这个进度，因为经常我会回过去看以前的小故事之类，而且基本都要点满拿那个传奇杯。</p>
<p>先说一下个人近况吧，还是每天 0.5-1 小时左右，本来是打算加长的，但我上次失业之后想了好几天，最终确定了 “只工作，不上班” 的未来道路，好吧，其实就是不想找工作了，所以这两个月都是在尝试其他方式生存下去，时间比较紧张，等我找到生存方式了，再来尝试把学习时长拉长。</p>
<p>然后说一下多领国最近的更新，更新了两个有意思的东西，一个是听力专题，一个是场景游戏，看下面的截图。</p>
<p>听力专题类似于之前的阅读听力，但是会更简单一点，而且看着比较有趣</p>
<p>场景游戏类似我之前说的，给你一个对话场景，界面上可以互动比较有参与感</p>
<p>PS：第四阶段之后都是全英文了，说实话听力方面压力有点大。。。主要是句子一长就反应不过来，还是听得太少了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>多邻国</tag>
        <tag>Duolingo</tag>
      </tags>
  </entry>
  <entry>
    <title>Human Resource Machine 01 - 15</title>
    <url>/posts/fbb14a4d/</url>
    <content><![CDATA[<blockquote>
<p>《人力资源机器》是一款模拟编程的游戏，适合用于学习编程的基本思维，该系列包含了这个游戏的个人解答和思路。可直接复制下面内容，进入游戏相应的关卡之后，点击右侧代码编辑栏下方的粘贴即可看到对应的运行代码，然后通过运行来看一下实际的执行顺序。</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>强迫症诊断中心说明：包含两个指标，优化诊断指的是用到的代码行数，效率诊断则是实际运行的平均代码步数。需要注意的是，代码行数最少不等于效率最高，具体可以看 02 的思路。说明在某些情况下，为了效率可以牺牲代码行数，当然大部分情况下这并不需要我们手动去做，编译器已经帮我们进行了优化。（如果有两个解答，第一个解答为行数优化，第二个为效率优化）</p>
</blockquote>
<h2 id="01-收发室"><a href="#01-收发室" class="headerlink" title="01 收发室"></a>01 收发室</h2><ul>
<li>目标优化：<code>6</code>，目标效率：<code>6</code></li>
<li>实际优化：<code>6</code>，实际效率：<code>6</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br></pre></td></tr></table></figure>
<p>思路：基本的输入输出操作，重复 3 次即可。</p>
<h2 id="02-繁忙的收发室"><a href="#02-繁忙的收发室" class="headerlink" title="02 繁忙的收发室"></a>02 繁忙的收发室</h2><ul>
<li>目标优化：<code>3</code>，目标效率：<code>25</code></li>
<li>实际优化：<code>3</code>，实际效率：<code>20</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>
<p>思路：增加了 JUMP 指令来进行循环的操作，行数减少至 3 行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br><span class="line">INBOX   </span><br><span class="line">OUTBOX  </span><br></pre></td></tr></table></figure>
<p>思路：JUMP 跳转循环解开为只有输入输出，减少了每一次的 JUMP，最终得到了实际执行步骤只有 10 * 2  的结果，比起 JUMP 循环的 3 * 10 行的代码少的多。</p>
<h2 id="03-复印楼层"><a href="#03-复印楼层" class="headerlink" title="03 复印楼层"></a>03 复印楼层</h2><ul>
<li>目标优化：<code>6</code>，目标效率：<code>6</code></li>
<li>实际优化：<code>6</code>，实际效率：<code>6</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYFROM 4</span><br><span class="line">OUTBOX  </span><br><span class="line">COPYFROM 0</span><br><span class="line">OUTBOX  </span><br><span class="line">COPYFROM 3</span><br><span class="line">OUTBOX  </span><br></pre></td></tr></table></figure>
<p>思路：新增了 COPYFROM 指令，直接拷贝 3 并输出 3 次即可。</p>
<h2 id="04-扰码处理器"><a href="#04-扰码处理器" class="headerlink" title="04 扰码处理器"></a>04 扰码处理器</h2><ul>
<li>目标优化：<code>7</code>，目标效率：<code>21</code></li>
<li>实际优化：<code>7</code>，实际效率：<code>21</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    OUTBOX  </span><br><span class="line">    COPYFROM 0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>
<p>思路：以相反的顺序输出，因此第二次输入不需要 COPYTO，直接输出即可。</p>
<h2 id="05-咖啡时间（略）"><a href="#05-咖啡时间（略）" class="headerlink" title="05 咖啡时间（略）"></a>05 咖啡时间（略）</h2><h2 id="06-多雨之夏"><a href="#06-多雨之夏" class="headerlink" title="06 多雨之夏"></a>06 多雨之夏</h2><ul>
<li>目标优化：<code>6</code>，目标效率：<code>24</code></li>
<li>实际优化：<code>6</code>，实际效率：<code>24</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    ADD      0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：新增了 ADD 指令，用手中数字加地板的，所以第 2 数字依然不需要拷贝到地板，第 2 个数字拿到手上直接相加并输出即可。</p>
<h2 id="07-零扑灭行动"><a href="#07-零扑灭行动" class="headerlink" title="07 零扑灭行动"></a>07 零扑灭行动</h2><ul>
<li>目标优化：<code>4</code>，目标效率：<code>23</code></li>
<li>实际优化：<code>4</code>，实际效率：<code>23</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">b:</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    b</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：新增了 JUMPZ 指令，为 0 则跳转。</p>
<h2 id="08-三倍扩大室"><a href="#08-三倍扩大室" class="headerlink" title="08 三倍扩大室"></a>08 三倍扩大室</h2><ul>
<li>目标优化：<code>6</code>，目标效率：<code>24</code></li>
<li>实际优化：<code>6</code>，实际效率：<code>24</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    ADD      0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：将手中数字同地板相同数字执行 ADD ，相当于 i + i，执行 n 次等于 n * i，也就是相当于乘法。</p>
<h2 id="09-零保护行动"><a href="#09-零保护行动" class="headerlink" title="09 零保护行动"></a>09 零保护行动</h2><ul>
<li>目标优化：<code>5</code>，目标效率：<code>24</code></li>
<li>实际优化：<code>5</code>，实际效率：<code>24</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">b:</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    c</span><br><span class="line">    JUMP     a</span><br><span class="line">c:</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     b</span><br></pre></td></tr></table></figure>

<p>思路：是 0 则输出，否则 JUMP 到开头。最终效率 28。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    b</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    c</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    d</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    e</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    f</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    g</span><br><span class="line">    INBOX   </span><br><span class="line">    JUMPZ    h</span><br><span class="line">b:</span><br><span class="line">c:</span><br><span class="line">d:</span><br><span class="line">e:</span><br><span class="line">f:</span><br><span class="line">g:</span><br><span class="line">h:</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：解开了上个解答当中的第 3 步 JUMP ，修改为输入，判断为 0 则马上到输出的序列。题目中有 7 个数字，因此为了确保遇到完全没有 0 也能跳转，所谓要重复 7 次。平均效率 23.</p>
<h2 id="10-八倍扩大装置"><a href="#10-八倍扩大装置" class="headerlink" title="10 八倍扩大装置"></a>10 八倍扩大装置</h2><ul>
<li>目标优化：<code>9</code>，目标效率：<code>36</code></li>
<li>实际优化：<code>9</code>，实际效率：<code>36</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：同地板自增之后覆盖并循环的行为相当于不断执行 i = i + i 的操作，每次执行之后 i 都会翻倍，执行 3 次之后为 8 倍。</p>
<h2 id="11-加运算走廊"><a href="#11-加运算走廊" class="headerlink" title="11 加运算走廊"></a>11 加运算走廊</h2><ul>
<li>目标优化：<code>10</code>，目标效率：<code>40</code></li>
<li>实际优化：<code>10</code>，实际效率：<code>40</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   1</span><br><span class="line">    SUB      0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    COPYFROM 0</span><br><span class="line">    SUB      1</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：新增 SUB 指令，由于需要后减前，前再减去后，所以两个值都要存放到地板。后减前之后重新从地板取得前值用于减去后值。</p>
<h2 id="12-四十倍扩大器"><a href="#12-四十倍扩大器" class="headerlink" title="12 四十倍扩大器"></a>12 四十倍扩大器</h2><ul>
<li>目标优化：<code>14</code>，目标效率：<code>56</code></li>
<li>实际优化：<code>14</code>，实际效率：<code>56</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    COPYTO   0</span><br><span class="line">    ADD      0</span><br><span class="line">    ADD      0</span><br><span class="line">    ADD      0</span><br><span class="line">    ADD      0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：四十的倍数我们可以拆开来看，因此我们可以先自增覆盖三次得到 8 倍，然后自增但是不覆盖 5 次来得到 5 * 8 = 40 倍。</p>
<h2 id="13-均衡之间"><a href="#13-均衡之间" class="headerlink" title="13 均衡之间"></a>13 均衡之间</h2><ul>
<li>目标优化：<code>9</code>，目标效率：<code>27</code></li>
<li>实际优化：<code>9</code>，实际效率：<code>27</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">b:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPZ    c</span><br><span class="line">    JUMP     b</span><br><span class="line">c:</span><br><span class="line">    COPYFROM 0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：两个数字相减为 0 则相当，因此先按照正常流程假设不为 0 写下前面 4 步并启动 JUMP 循环，然后在第 4 步后面加入 是否为 0 判断，是的话则跳转到拷贝地板值并输出。效率为 28 步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPZ    b</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPZ    c</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPZ    d</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPZ    e</span><br><span class="line">b:</span><br><span class="line">c:</span><br><span class="line">d:</span><br><span class="line">e:</span><br><span class="line">    COPYFROM 0</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：解开第 6 步的 JUMP 跳转循环，重复 1-4，每次都判断成功都跳到最后的输出，最终效率 27。</p>
<h2 id="14-最大值室"><a href="#14-最大值室" class="headerlink" title="14 最大值室"></a>14 最大值室</h2><ul>
<li>目标优化：<code>10</code>，目标效率：<code>34</code></li>
<li>实际优化：<code>10</code>，实际效率：<code>34</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:</span><br><span class="line">    INBOX   </span><br><span class="line">    COPYTO   0</span><br><span class="line">    INBOX   </span><br><span class="line">    SUB      0</span><br><span class="line">    JUMPN    b</span><br><span class="line">    ADD      0</span><br><span class="line">    JUMP     c</span><br><span class="line">b:</span><br><span class="line">    COPYFROM 0</span><br><span class="line">c:</span><br><span class="line">    OUTBOX  </span><br><span class="line">    JUMP     a</span><br></pre></td></tr></table></figure>

<p>思路：用第二个数减去第一个数，得到负数则说明第二个数小于第一个数，负数的话则拷贝第一个存放的值，然后输出，如果是非负数的话则输出拿到的第二个值。需要注意的是，在获取第二个值之后并没有存放到地板，而是直接拿来用，然后当判断为非负数之后通弄过 ADD 来获得原来的值，这样做效率更高。</p>
<h2 id="15-斗志注入（略）"><a href="#15-斗志注入（略）" class="headerlink" title="15 斗志注入（略）"></a>15 斗志注入（略）</h2>]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Programming Game</tag>
        <tag>Human Resource Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>再看《臣服实验》，用行动打破内耗</title>
    <url>/posts/5d9ec39b/</url>
    <content><![CDATA[<p>两年前我在某个成长播客听到了《臣服实验》这本书，当时的我带着觉醒的期待打开了这本书，然后带着满心的疑惑留下略带贬义的评价：</p>
<p>“一个被时代浪潮推上顶峰的幸运儿，将自己的成功全都归因到‘臣服’上。”</p>
<span id="more"></span>

<p>两年后的今天，我正处于探索新领域的焦虑当中，对未知充满了恐惧，并不断自我苛责，内耗是我的日常。</p>
<p>此时再一次听到了“臣服实验”的时候有了不一样的体会。</p>
<p>“我个人的偏爱好恶不会指导我的生活方向，我主动地允许我的生活被一个强有力得多的力量指导，那就是生活本身”</p>
<p>作者想要表达的其实并不是我之前所认为的“接受命运的安排就会获得好的结果 “，而是“未来是无法规划的，停止过度思考，去拥抱变化，在变化中找到答案。”，所以各种成功经历并不重要，有多少运气成分也不重要，成功与否更不重要。</p>
<p>重要的是接受不确定性并让自己从自我折磨中解脱，因为当你试图去规划所有未来，就必然会被淹没在各种不重要的，甚至是想象的困难当中，然后就是无止尽的内耗和拖延，成为 “思维的巨人，行动的矮子”。</p>
<p>我就是这样一个人，在决定当读书博主前为自己设想了许许多多的困难：</p>
<p>👉 “高中两个小时都憋不出来 800 个字，怎么可能写的出多少内容”</p>
<p>👉 “我写的内容太简陋了，等下被人说怎么办”</p>
<p>但真当我发出笔记之后才发现都是自己的想象，不仅超过 800 字，甚至还需要手动删减，也没有人批评我的内容，因为压根没人看，批评这种问题至少需要有人看了啊！！！</p>
<p>当然，我并不是在宣扬要无视一切马上行动，因为这本书仅适用于常常内耗的人，如果是一个不清楚自己定位就胡乱行动的人，这样的想法并不正确。</p>
<p>盲目的跟风行动很容易让你疲惫不堪，看着同样的事情别人有成果，自己却没有成果是很容易自我怀疑的，所以先找到自己的定位吧。</p>
<p>❓ 那么如何确定应该立即行动还是先寻找自己的定位呢？请先问自己一个问题：</p>
<p>“这个事情是我想做的还是我认为应该做的？”</p>
<p>阅读并输出内容是我自己想做的事情，只是恰好还有机会变现，因此即便数据不好，我也能够继续下去，又或者换个方式换个地方去创作。</p>
<p>可如果我是因为听说做读书博主可以变现才开始输出的，那么当我数据不好的时候会怎么样呢？我想大概率会放弃，所以跟风是不可持续的。</p>
<p>以上，希望所有人都能够早日摆脱内耗，获得内心的稳定性，也找到想做的事情。</p>
<p>我是夏北游，每天进步一点点的夏北游。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个自我要求的读者</title>
    <url>/posts/32794bd7/</url>
    <content><![CDATA[<p>花了两天时间大致看完了，记录一下我对分析阅读和作为一个自我要求读者的理解。</p>
<span id="more"></span>

<h2 id="如何架构"><a href="#如何架构" class="headerlink" title="如何架构"></a>如何架构</h2><p>整体来说，这本书到底在讲什么？</p>
<p><strong>规则一：你一定要知道自己在读的是哪一类书，而且越早知道越好。最好早在你开始阅读之前就先知道。（P68）</strong></p>
<p>你应该在检视阅读的时候就确定书的分类，当你对一本书有了正确分类之后，在阅读时关注的重点就是不一样的。</p>
<p>例如对于《飘》，如果你认为这是一本爱情小书，那么就会关注其中的感情线，可如果你将其定义为美国内战时期的南方历史，在阅读的时候就会关注其中的时间线。</p>
<p><strong>规则二：使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容。（P84）</strong></p>
<p>如果你无法做到简单几句话描述出来这本书，那就意味着你对这本书的理解还不够。倘若你描述出了这本书的内容，但却使用了过多的篇幅，则意味着你没有抓到其中的核心，而只是看到这个核心的多样性，你需要再进一步的提炼。</p>
<p><strong>规则三：将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体的架构。（P85）</strong></p>
<p>一本好书就像是一个结构严谨的房屋，每个空间都是这个房子的一部分，共同组成一个完整的房子。</p>
<p>这些结构应当具有一定的逻辑秩序，相互之间如何联系的，是并列？又或者是演绎推理？最终会在笔记上亦或者是脑海里得到一个金字塔结构的思维导图，这也是为什么使用思维导图辅助阅读效果很好。</p>
<p><strong>规则四：找出作者要问的问题。（P103）</strong></p>
<p>一本书的产生必然有其最开始的理由或者目的，同时伴随着一个过多个问题，而这本书正是作者对这些问题的解答。倘若说规则二和三是在回答这本书的“如何做”，规则四就是在回答“为什么”。</p>
<h2 id="如何诠释"><a href="#如何诠释" class="headerlink" title="如何诠释"></a>如何诠释</h2><p>作者细部说了什么，怎么说的？</p>
<p><strong>规则五：找出重要的单字，通过它们与作者达成共识。（P109）</strong></p>
<p>当我们通过文字向别人传递信息的时候，如果双方未能就最基本的单子有共识，就无法正确的交流。</p>
<p>其困难在于同一个字在不同上下文具有不同的词义，而同一个词义又可以有不同的诠释，倘若读者不能识别到这个差异，就会有错误的解读。</p>
<p><strong>规则六：将一本书中最重要的句子圈出来，找出其中的主旨。（P132）</strong></p>
<p>从句子这个单位来看，通常会有一个主旨，这个主旨表明所要论述的核心内容，而其他内容则是对于这个主旨的修饰。</p>
<p>在阅读时，要分清楚哪些是“证据”和“修饰词”，实际上作者这个句子到底在表述什么内容？有的作者会直接在开始说明，但也有的没有，这就需要读者去寻找。</p>
<p><strong>规则七：从相关文句的关联中，设法架构出一本书的基本论述。（P132）</strong></p>
<p>句子和句子之间通常会有一定的关联，从而共同构成更上层的论述。</p>
<p>一般来说是演绎法和归纳法。</p>
<p>此外还要注意作者在论述的时候，哪些是假设的，哪些是已经可证实的，基于假设的句子而得到的结论也是错误的。</p>
<p><strong>规则八：找出作者的解答。（P147）</strong></p>
<p>正如规则四所说，作者基于某个问题开始写作，而必然也应当有所解答，那么最终他是否对自己的提问做出了解答？又是否有问题没有解答？亦或者是留下了更多的问题？</p>
<h2 id="如何评价，实际意义"><a href="#如何评价，实际意义" class="headerlink" title="如何评价，实际意义"></a>如何评价，实际意义</h2><p>这本书说的有道理吗？是全部有道理，还是部分有道理？这本书跟你有什么关系？</p>
<p><strong>规则九：在你说出“我同意”、“我不同意”或“我暂缓评论”，之前，你一定要能肯定地说：“我了解了”。（P154）</strong></p>
<p>当一个人对一本书进行评断的时候，如果不能够说出为什么，那意味着他们根本不知道自己在赞同又或者批评什么，只是在表达一种个人情绪。</p>
<p>需要注意，有些书籍是基于该作者其他书籍的，那么在进行评断的时候就应当对相关的书都有所来接，才能做出公正的评断。（P157 示例）</p>
<p><strong>规则十：当你不同意作者的观点，要理性地表达自己的意见，不要无理地辩驳或争论。（P157）</strong></p>
<p>阅读想要获得的是真理，而不是与他人进行争论后的输赢。</p>
<p>事实上，探寻真理常常是一个不断摧毁自己心智和重建心智的过程，它并不轻松，反而非常的艰难。</p>
<p><strong>规则十一：尊重知识与个人观点的不同，在作任何评断之前，都要找到理论基础。（P162）</strong></p>
<p>知识是客观的，而个人意见是主观的，缺少理论基础的评断是主观的个人意见，这样的评断是不公正却没有意义的。</p>
<p>在做出评断之前，应当先问问自己，我是否误解了？又或者实际上我并没有理解对方的意思？这是否可以通过进一步的学习来消除这种问题。</p>
<p><strong>批评一本书的特别标准</strong></p>
<p>盲目的批评是情绪而不是观点，只有有理有据的反驳才称得上评断，以下四点便是当你确定自己理解了书中的内容之后，仍然想要表达”不同意“或”暂缓评论“时的标准。</p>
<ul>
<li>证明作者的知识不足</li>
<li>证明作者的知识错误</li>
<li>证明作者不合逻辑</li>
<li>证明作者分析与论证不够完整</li>
</ul>
<h2 id="生命与心智的成长"><a href="#生命与心智的成长" class="headerlink" title="生命与心智的成长"></a>生命与心智的成长</h2><p>“人们到了 30 岁左右，身体状况就达到了巅峰，随着时间的变化，身体的状况只有越来越恶化，而我们的头脑却能无线地成长和发展下去。”</p>
<p>“心智就跟肌肉一样，如果不常运用就会萎缩”</p>
<p>娱乐和资讯是一种外在的支撑物，让我们觉得自己还活着，然而这样的外在之物并不总是存在，有些时候它们会消失，这时就需要内在的精神力量去支撑我们活着。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>读了很多书，但我并不懂的如何读书</title>
    <url>/posts/ebb9be30/</url>
    <content><![CDATA[<p>当我翻开这本书的时候，我的想法同译者在译序所说的一般：如果我在初高中青少年时期，就能读到这本有关如何读书的书，那我会少走多少阅读的冤枉路？</p>
<span id="more"></span>

<p>我一直以来对于阅读的看法都是，不就是拿起一本书，然后看完就好了，这不是很简单的一件事情吗？真的有必要去专门的学习如何阅读吗？</p>
<p>但这样的想法导致的结果就是，我经常看完一本书，就忘得一干二净，当有人让我向他推荐某本书的时候，我也只能是说出一个书名，又或者里面的一两句金句名言，然后就支支吾吾的说不出个所以然来，那么对方又怎么能够被我说服，从而去阅读我推荐给他的一本书呢？</p>
<p>于是我可以得出一个结论，我只是看过这本书，而这本书并不是真正的属于我，它对我而言只是一个消遣的读物，可我最开始的阅读目的并不是如此，我之所以阅读是因为想要获得知识，又或者获得思想上的启发，而不仅仅是消遣。</p>
<p>当然，并不是说不能以消遣为目的去阅读，只是如果说你阅读的目的不仅仅是消遣，那么就需要学习一些本书中的技巧，来将一本书真正的变成你的思想上的所有物，而不仅仅是物理意义上的所有物，既陈列在书架上的书。</p>
<p>接下来简单介绍一下这本书：</p>
<p>📖《如何阅读一本书》</p>
<p>✒️ 莫提默·J.艾德勒 查尔斯·范多伦</p>
<p>这是一本实用的书籍，作者想要做的就是教会你如何阅读，在书中作者将阅读分成了四个层次：基础阅读、检视阅读、分析阅读和主题阅读，每个层次都有其特定的目标与方法，通过每个层次提供的技巧让我们能够高效的阅读，其中包含但不限定于回答了以下的内容：</p>
<p>⬛ 如果快速的知道一本书值不值得读？我们的时间是有限的，不应该将其浪费在不值得读的作品上。</p>
<p>⬛ 阅读一本书的速度应该是快还是慢？太快可能无法理解，太慢又可能浪费时间。</p>
<p>⬛ 让一本书真正属于你需要回答哪些问题？又如何做笔记？</p>
<p>⬛ 如何公正的评价一本书？我们不应该带着偏见去阅读。</p>
<p>⬛ 阅读不同的读物都应该用什么方法去阅读？历史、社科、哲学、想象文学，读不同的书要用不同的方式。</p>
<p>此外，在书中除了帮助我们解决如何阅读的难题，还列出一个长达 20 页的书单，来为我们解决读什么这个问题。</p>
<p>总之，如果你也想要让一本书真正的属于你，想要学会如何阅读的话，请去看这本书吧，将它摆在床头不断翻阅，至少在你学会阅读之前如此。</p>
<p>最后，我是夏北游，每天进步一点点的夏北游。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
  </entry>
  <entry>
    <title>从一本书开始，选择成为博主</title>
    <url>/posts/f5ab715/</url>
    <content><![CDATA[<p>我是一名程序员,至少几个月前还没失业的时候是</p>
<p>说起来我并不讨厌当一个程序员，只是整理想法清单的时候发现我还有那么多想做的事情,但对于我而言麻烦的恰恰是想做的太多了反而无法选择，于是我再次陷入了迷茫，直到我发现了一本书……</p>
<span id="more"></span>

<p>📖《如何找到想做的事》- 八木仁平</p>
<p>正如书名所写的，这是一本不是很厚的指导手册，讲述如何找到自己“真正”想做的事</p>
<p>作者在书中提出了 5 个阻碍行动的思维误区：</p>
<ul>
<li>不需要你一直都想做的事情，只需要是当下想做的事情，😭 这一点我真的是深有体会，我常常想的就是找个一辈子的爱好</li>
<li>现实中不会有旁白告诉你：“从此历史的车轮开始转动”，改变的到来可能是一个非常平淡的日子，我就经常回去追求仪式感而凑整点……</li>
<li>想做就只是想做，并不需要利他，只是说世界这么大，总会有人和你类似，需要你的帮助，价值就这么产生了</li>
<li>和以前相比，现在的选择实在是太多太多了，一味的行动只会浪费更多时间</li>
<li>想做的事情并非不能成为工作，只是要区分好工作目的和喜欢的事情</li>
</ul>
<p>作者还提出了一个指导公式：</p>
<p>喜欢的事 ➕ 擅长的事 ➕ 重要的事 = 真正想做的事</p>
<ul>
<li>喜欢的事让你保持热情</li>
<li>擅长的事让你获得成果和财富</li>
<li>重要的事指导你进行选择</li>
</ul>
<p>作者并没有在书中空谈理想，而是通过一系列的问题和思维模型，指导读者写出真正想做的事。</p>
<p>跟随书中的指导，我为自己列出了以下的内容：</p>
<ul>
<li>价值观：自由、探索、创造、成就、助人</li>
<li>擅长的：学习、思考、整理、表达、共情、耐心、创新、反省、责任、审慎、助人、构建</li>
<li>喜欢的：编程、设计、阅读、写作、自我认知、手工、雕刻、宠物、心理学、经济学、文学……（😭 写不完，我真的对很多事情都感兴趣啊！！！）</li>
</ul>
<p>综合得到我真正想做的事 👇</p>
<p>”通过阅读各种不同的书籍和输出有帮助的内容来帮助和我有相同问题的人，从而获得感谢和成就感。“</p>
<p>而基于我个人目前的需求，我将当下的阅读主题定为个人成长当中的自我认知。</p>
<p>☝️ 以上，就是我为什么成为一个博主的原因</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>read</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 多平台打包记录</title>
    <url>/posts/1d718831/</url>
    <content><![CDATA[<p>本文记录在 Qt 跨平台应用开发完成之后的打包步骤，每个平台都列出了 Qt 版本和系统环境，因为这些都会对打包过程有一定的影响，例如 macOS 默认下载 xcode 的 SDK 版本过新，而 Qt 5.15.2 支持不了等，会在下面写出为什么选择这些版本，希望能给你带来帮助。</p>
<span id="more"></span>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows 下打包应该是最容易的，直接只用 Qt 提供的工具运行即可</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Windows 10</li>
<li>Qt 5.15.2</li>
</ul>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ol>
<li><p>环境变量配置，Windows 的环境变量不多说了，需要配置的是下面这样的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Qt\5.15.2\5.15.2\msvc2019_64\bin</span><br></pre></td></tr></table></figure></li>
<li><p>假设应用名称为 TestApp，Qt Creator 中 Realease 模式运行一次</p>
</li>
<li><p>找到 Realease 路径中同名应用复制到 TestApp 文件夹</p>
</li>
<li><p>终端运行下方内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windeployqt TestApp</span><br></pre></td></tr></table></figure></li>
<li><p>对于最终生成的代码可以进行一些适当的删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这几个在 Widget 开发中基本都有用到</span></span><br><span class="line">Qt5Widgets.dll <span class="comment"># widgets 模块，QML 应用可以删除</span></span><br><span class="line">Qt5Gui <span class="comment"># Gui 基本是要的</span></span><br><span class="line">Qt5Core.dll <span class="comment"># Core 模块</span></span><br><span class="line">platforms/qwindows.dll <span class="comment"># 平台相关插件</span></span><br><span class="line">styles <span class="comment"># Qt 样式表，没用到自定义样式表的话可以删除</span></span><br><span class="line">translations <span class="comment"># 国际化内容，没用到也可以删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面如果代码中没用到都可以删</span></span><br><span class="line">iconengines/qsvgicon.dll <span class="comment"># Svg</span></span><br><span class="line">imageformats <span class="comment"># 各种图片格式的支持，默认png 已经支持，可以删除</span></span><br><span class="line">Qt5Svg.dll <span class="comment"># svg</span></span><br><span class="line">opengl32sw.dll <span class="comment"># OpenGL</span></span><br><span class="line">D3Dcompiler_47.dll <span class="comment"># OpenGL</span></span><br><span class="line">libEGL.dl <span class="comment"># OpenGL</span></span><br><span class="line">libGLESv2.dll <span class="comment"># OpenGL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>启动 TestApp.exe 直接可用，然后将全部压缩成压缩包发给其他人吧。</p>
</li>
</ol>
<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>windows 下不想打包到 exe 的静态文件，可以在运行打包后直接放入根目录</p>
<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>macOS 比较特殊的一点是芯片分为了 intel 架构和 m1 芯片的 arm 架构，需要分别打包，而 Qt 6.2 版本才支持 arm 架构，打包步骤没什么差别。此外要 Qt 5.14.2 仅支持 xcode sdk 10.15，所以选择 Qt 6.2.1，也可以选择将 xcode 降级。</p>
<h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><ul>
<li>macOS Monterey 12.0.1 arm | macOS Big SUr 11.1 intel</li>
<li>Qt 6.2.1</li>
</ul>
<h3 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h3><ol>
<li>需要先商店安装 xcode，不然会缺少 kits</li>
<li>【可选】macOS 虚拟机卡顿严重，可以参考链接 9 优化一下</li>
<li>配置 macdeployqt 命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入以下内容后保存</span></span><br><span class="line"><span class="built_in">export</span> QT_DEPLOY_PATH=/Users/你的用户名/Qt/6.2.1/macos/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$QT_DEPLOY_PATH</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证生效，看下有没有刚加入的路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> </span><br></pre></td></tr></table></figure></li>
<li>假设应用名称 TestApp，在Qt Creator 中 Release 模式运行一次</li>
<li>找到 Release 路径，拷贝 TestApp 到同名文件夹</li>
<li>移动到同名文件夹打开终端<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macdeployqt TestApp.app -dmg</span><br></pre></td></tr></table></figure></li>
<li>将打包好的 dmg 文件发给别人吧</li>
</ol>
<h3 id="静态文件-1"><a href="#静态文件-1" class="headerlink" title="静态文件"></a>静态文件</h3><p>macOS 下静态文件，需要在运行 release 后，右键 app 文件显示包内容，然后放进 Contents/MacOs 里。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>linux 下打包会比较麻烦，需要说明的是，Ubuntu 的版本和 Qt 的版本都会影响环境配置，linuxdeployqt 这个 打包工具当前仅支持到 Ubuntu 18.04，基于这些原因选择当前系统版本和 Qt 版本。</p>
<h3 id="环境-2"><a href="#环境-2" class="headerlink" title="环境"></a>环境</h3><ul>
<li>VMware Workstation Pro</li>
<li>Ubuntu 18.04 x64</li>
<li>Qt 5.14.2</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>安装包 <a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.14/5.14.2/qt-opensource-linux-x64-5.14.2.run">qt-opensource-linux-x64-5.14.2.run</a>，如果不能拖拽需要通过 **虚拟机-安装 VMware Tools **来安装相关工具。</li>
<li>然后双击安装，选择组件时记得选择 Qt5.14.2/Desktop gcc 64-bit</li>
<li>【可选】更换 Ubuntu 的apt 镜像源为 <a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11ZMu5Np">阿里云ubuntu 镜像</a> ，具体更换步骤点进去查看，注意系统版本。下面方便使用复制了 18.04 的源。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将这个文件内容替换为以下内容</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在终端中安装环境包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get upgrade</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libqt4-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>创建一个项目试试看吧</li>
</ol>
<h3 id="打包-linuxdeployqt"><a href="#打包-linuxdeployqt" class="headerlink" title="打包 linuxdeployqt"></a>打包 linuxdeployqt</h3><ol>
<li><p>下载打包工具 <a href="https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage">linuxdeployqt-continuous-x86_64.AppImage</a></p>
</li>
<li><p>配置 linuxdeployqt 命令</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> linuxdeployqt-continuous-x86_64.AppImage linuxdeployqt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到用户的 bin 目录，就可以全局调用了</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> linuxdeployqt /usr/local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下可用性</span></span><br><span class="line">linuxdeployqt --version</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置Qt 环境变量</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将下面的[gcc 目录]替换为你得 Qt 安装目录下的 gcc 路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 sudo 打开 ~/.bashrc 并在末尾插入以下内容</span></span><br><span class="line"><span class="built_in">export</span> QT_BIN_PATH=[gcc 目录]/bin</span><br><span class="line"><span class="built_in">export</span> QT_LIB_PATH=[gcc 目录]/lib</span><br><span class="line"><span class="built_in">export</span> QT_PLUGINS_PATH=[gcc 目录]/plugins</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$QT_BIN_PATH</span>:<span class="variable">$QT_LIB_PATH</span>:<span class="variable">$QT_PLUGINS_PATH</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效并验证可用性，如果输入的 $PATH 有你刚刚的路径则成功</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>生成 Release 包，假设应用为 TestApp</p>
</li>
<li><p>Release 模式运行一次，在左下角切换模式。</p>
</li>
<li><p>进入到 Release 路径，路径可以查看侧边栏 Project 中 ‘Build Settings’-General-‘Build directory’ 的路径。</p>
</li>
<li><p>在 Release 中找到TestApp 并将它拷贝到一个新建的TestApp文同名件夹中</p>
</li>
<li><p>在该文件夹中创建一个 default.desktop 文件夹和你要作为图标的图片，使用任意编辑器打开 default.desktop 写入下面内容，见下方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=[app 打包后名称]</span><br><span class="line">Exec=AppRun %F</span><br><span class="line">Icon=图标名称</span><br><span class="line">Comment=一些描述</span><br><span class="line">Categories=Utility;</span><br></pre></td></tr></table></figure></li>
<li><p>【可选】添加 <strong>libqgtk2 &amp; libqgtk2style</strong> ，避免一些打包错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if Error message</span></span><br><span class="line">WARNING: Plugin <span class="string">&quot;/usr/lib/x86_64-linux-gnu/qt4/plugins/platformthemes/libqgtk2.so&quot;</span> not found, skipping</span><br><span class="line">WARNING: Plugin <span class="string">&quot;/usr/lib/x86_64-linux-gnu/qt4/plugins/styles/libqgtk2style.so&quot;</span> not found, skipping</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fix 如果没有安装 git 请先执行 sudo apt-get install git 来安装</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get -y install libgtk2.0-dev</span><br><span class="line">git <span class="built_in">clone</span> http://code.qt.io/qt/qtstyleplugins.git</span><br><span class="line"><span class="built_in">cd</span> qtstyleplugins</span><br><span class="line">qmake</span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure></li>
<li><p>打开终端运行打包 ，这样我们得到打包后的 .AppImage 文件了，将它发送给其他人使用吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linuxdeployqt TestApp -appimage</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="打包-Qt-Installer-Framework"><a href="#打包-Qt-Installer-Framework" class="headerlink" title="打包 Qt Installer Framework"></a>打包 Qt Installer Framework</h3><p>详情请看 <a href="https://medium.com/geekculture/how-to-deploy-your-qt-cross-platform-applications-to-linux-operating-system-with-qt-installer-ac28258bc370">How to Deploy Your Qt Cross-Platform Applications to Linux Operating System With the Qt Installer Framework - medium</a></p>
<h3 id="静态文件-2"><a href="#静态文件-2" class="headerlink" title="静态文件"></a>静态文件</h3><p>linux 下静态文件，就不能打包成 AppImage，而是要将相关库文件复制过来，如果是使用 linuxdeployqt 进行打包，只需要修改打包命令的参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linuxdeployqt TestApp -always-overwrite</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/">清华大学开源镜像站</a></li>
<li><a href="https://github.com/balena-io/etcher/issues/1914">Categories= key missing in Linux desktop file · Issue #1914 · balena-io/etcher</a></li>
<li><a href="https://github.com/probonopd/linuxdeployqt/issues/350">ldd not finding libqgtk2 platform theme.</a></li>
<li><a href="https://www.cnblogs.com/linuxAndMcu/p/11016322.html">在Linux下使用linuxdeployqt发布Qt程序</a></li>
<li><a href="https://medium.com/swlh/how-to-deploy-your-qt-applications-to-linux-operating-system-with-linuxdeployqt-3c004a43c67a">How to Deploy Your Qt Cross-Platform Applications to Linux Operating System With linuxdeployqt -medium</a></li>
<li><a href="https://blog.csdn.net/naibozhuan3744/article/details/84328872">ubuntu16.0.4（linux）安装qt5.9.4步骤、配置gcc和启动</a></li>
<li><a href="https://blog.csdn.net/klarclm/article/details/8550931">ubuntu 安装g++</a></li>
<li><a href="https://blog.csdn.net/itas109/article/details/80497065">QT使用windeployqt部署发布及其精简</a></li>
<li><a href="https://blog.csdn.net/weixin_35437233/article/details/112577708">虚拟机卡顿_三步解决Mac虚拟机、黑苹果 卡顿的问题，图文教程送工具</a></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2 终端配置</title>
    <url>/posts/5e0a8950/</url>
    <content><![CDATA[<p>最近因为工作的原因，需要配置 macOS 的环境，terminal 算是开发环境中经常使用的了。</p>
<span id="more"></span>

<p>放一张效果图 <img data-src="/images/iTerm2-config.png" alt="iTerm2 config"></p>
<h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><p><em><a href="https://iterm2.com/">iTerm2</a></em> 下载打开即可安装</p>
<p><em><a href="https://ohmyz.sh/">Oh My ZSH!</a></em> 是 <em>zsh</em> 的配置管理工具，使用命令行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wget , install wget before ohmyzsh if you using wget</span></span><br><span class="line">brew install wget</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>首先配置一个 zsh 的渲染主题（不是文字颜色主题），从 <em><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">Theme wiki</a></em> 中选择一个你喜欢的主题的名称，这里选择 <em>agnoster</em> ，然后配置主题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Open config file</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. find and change ZSH_THEME field.</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>接着安装一些功能插件，从 <em><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">Plugins wiki</a></em> 找到需要的插件下载，或者搜一下 <em><a href="https://github.com/search?q=zsh">zsh - Github</a></em> 看一下，下面用两个插件示范。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Download plugins</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Open config file</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Find and change Plugins field.</span></span><br><span class="line">plugins=(zsh-autosuggestions zsh-syntax-highlighting)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Add starter in the end</span></span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 没有这个会导致原始环境变量失效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>经过上面配置后再次打开 iTerm2 后就会有自动补全和代码高亮的效果。</p>
<h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>字体在显示效果中也很重要。安装 <em><a href="https://github.com/powerline/fonts">Powerline - Github</a></em> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth 1</span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>打开 <em>iTerm2</em> ，进入到文字设置标签 <em>Profiles&gt;Open Profiles&gt;Edit Profiles&gt;Text</em> 找到 <em>font</em> 选项，选择名称后缀为 <em>for Powerline</em> 的任意字体。</p>
<p>将 <em>Text Rendering</em> 选项的 <em>Use build-in Powerline glyphs</em> 勾选上，不然会出现乱码。</p>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>适当的透明度和失焦能够带来很好的观感。进入到窗口标签 <em>Profiles&gt;Open Profiles&gt;Edit Profiles&gt;Window</em>。</p>
<p>通过对属性 <em>Transparency</em> 的调整来修改窗口透明度，不需要太高，个人设置 20 左右。</p>
<p>通过对属性 <em>Blur</em> 的调整修改失焦，类似玻璃效果，个人设置 16 左右。</p>
<h2 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h2><p>最后我们还要设置一下各种文本的显示颜色，进入颜色标签 <em>Profiles&gt;Open Profiles&gt;Edit Profiles&gt;Colors</em> 。</p>
<p>右下角 <em>Color Presets</em> 选择任意喜欢的主题，然后基于这个主题进行调整，<em>Basic Colors</em> 主要是基本颜色，右边的 <em>ANSI Colors</em> 则是各种状态的颜色，例如链接，命令，文件，补全文本等等，可以直接修改，iTerm2 会实时变更的。</p>
<p>如果你只想要更多的配色，而不想要自己慢慢调整，那么可以看看 <em><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a></em> ，里面的主题不仅仅能用在 iTerm2 中。</p>
<p>如果只想要一个主题并不想下载全部内容，可以在 <a href="https://iterm2colorschemes.com/">iterm2colorschemes</a> 查看，找到喜欢的主题之后右键保存到本地为 .itermcolors 文件。</p>
<p>如果想要全部一次性下载（通常来说这没有必要），也可以在上述网站右上角下载或者直接 clone 整个仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Download iT er m-Color-Schemes</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mbadolato/iTerm2-Color-Schemes.git --depth 1</span><br></pre></td></tr></table></figure>

<p>在项目中找到想要的主题的名字，例如 <em>3024 Day</em></p>
<p>通过 <em>Profiles&gt;Open Profiles&gt;Edit Profiles&gt;Colors</em> 中右下角 <em>Color Presets&gt;Import</em> ,然后选择 <em>Term2-Color-Schemes&gt;schemes&gt;3024 Day.itermcolors</em> 文件。</p>
<p>或者也可以按住 <em>shift/command</em> 进行多选打开多个主题。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://iterm2.com/">iTerm2</a></li>
<li><a href="https://ohmyz.sh/">Oh My ZSH!</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki">onmyzsh wiki - Github</a></li>
<li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions - Github</a></li>
<li><a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">zsh-syntax-highlighting - Github</a></li>
<li><a href="https://github.com/powerline/fonts">Powerline - Github</a></li>
<li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes - Github</a></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>macOS</tag>
        <tag>iTerm2</tag>
        <tag>Theme</tag>
        <tag>Font</tag>
      </tags>
  </entry>
  <entry>
    <title>📓 VMware 下安装 macOS 踩坑</title>
    <url>/posts/b157a39c/</url>
    <content><![CDATA[<p>更新：以下内容有待验证，例如后期验证过 VMware 16.2 也是可以用于安装 macOS 的。</p>
<p>有时候我们需要使用 macOS 的一些东西，但是又不想专门买一个笔记本电脑，例如使用 Qt 开发跨平台的桌面应用，我们只需要使用 macOS 来编译对应版本的运行包而已。 这时候虚拟机就派上用场了。关于安装的步骤请直接看底部参考链接1，这里主要记录安装过程遇到的一些问题和解决方案。个人建议先浏览一下在去看参考链接1，特别是如果你也是 AMD 的 CPU 。如果你是 Inter 的 N 卡，可能问题没这么多。</p>
<span id="more"></span>


<h3 id="⚙-相关硬件参数"><a href="#⚙-相关硬件参数" class="headerlink" title="⚙ 相关硬件参数"></a>⚙ 相关硬件参数</h3><p>CPU：AMD Ryzen 5 3600</p>
<h3 id="✅-VMware-workstation-pro-的选择和安装"><a href="#✅-VMware-workstation-pro-的选择和安装" class="headerlink" title="✅ VMware workstation pro 的选择和安装"></a>✅ VMware workstation pro 的选择和安装</h3><p>选择 15.0 或者 15.1 版本，序列号随便搜一下安装教程一般最下面都有，以下是原因：</p>
<ul>
<li>16 因为目前找到的用于解锁安装 macOS 系统的 Unlocker 最多支持到 15</li>
<li>15.5 如果使用的是 AMD 的 CPU 可能是不行的，会导致一个 <strong>未能启动虚拟机</strong> 的问题</li>
<li>15.1 未实测，但是根据一些搜索结果来看 AMD 也可以</li>
<li>15.0 实测可行</li>
</ul>
<h3 id="✅-Unlocker-的选择和使用"><a href="#✅-Unlocker-的选择和使用" class="headerlink" title="✅ Unlocker 的选择和使用"></a>✅ Unlocker 的选择和使用</h3><p>选择 paolo-projects/**<a href="https://github.com/paolo-projects/unlocker">unlocker</a>**，可以下载 <a href="https://github.com/paolo-projects/unlocker/releases/tag/3.0.3">Release</a> 的打包版本或者自行安装 Python 2.7 的环境来直接运行。</p>
<ul>
<li>theJaxon/<strong><a href="https://github.com/theJaxon/unlocker">unlocker</a></strong> 是早期版本，作者很久没有更新了，亲测失效，比较坑的是你在 Github 搜 unlocker 找到的第一个就是这个</li>
<li>paolo-projects/<strong><a href="https://github.com/paolo-projects/unlocker">unlocker</a></strong> 是上面那个的 fork 分支，亲测可用，但是 Github 你搜索 unlocker 的时候前面几页都没看到，倒是能看到同作者的另一个基于 C++ 写的 auto-unlocker，或许也可以？</li>
</ul>
<p>下载之后以管理员权限运行目录下的 win_install.cmd 并等待执行完毕即可</p>
<h3 id="✅-macOS-的镜像"><a href="#✅-macOS-的镜像" class="headerlink" title="✅ macOS 的镜像"></a>✅ macOS 的镜像</h3><p>如果你每次开启虚拟机后并没有进入macOS的加载画面，而是进入到蓝屏的 boot manager 的话，那么很可能是因为你镜像有问题，可以找一些别人已经试过的镜像。比如参考链接1中的两个镜像。</p>
<ul>
<li>dmg 是原版系统，虚拟机用不了，如果要使用的话需要一个大于 8g 的 U 盘制作启动盘，不推荐这个方法。个人使用 UltraISO 去制作启动盘，出现了一个新的问题，制作后的启动盘不能被虚拟机识别，可能虚拟机版本有关，测试用的 15.5，另外写入镜像后剩余的磁盘是未分配状态，所以你插入启动盘电脑能找到，但是在 <strong>个人电脑</strong> 是看不到的，需要到磁盘管理手动分配空间。</li>
<li>ISO/CDR 系统镜像，虚拟机可用，如果有 dmg 又不想下载别人发的镜像也可以尝试自己将 dmg 转换为 ISO/CDR 格式，参考链接2，除此之外，cdr 格式在WMware 中会说可能不可用，但是其实是可以的，直接改一些后缀为 iso 即可。</li>
</ul>
<h3 id="✅-客户机操作系统已禁用-CPU，请关闭或重置虚拟机"><a href="#✅-客户机操作系统已禁用-CPU，请关闭或重置虚拟机" class="headerlink" title="✅ 客户机操作系统已禁用 CPU，请关闭或重置虚拟机"></a>✅ 客户机操作系统已禁用 CPU，请关闭或重置虚拟机</h3><p>点击你的虚拟机，然后右键选择打开虚拟机目录，使用任意文本编辑器打开 <strong>【你的虚拟机名称】.vmx</strong> 这样的一个文件，添加以下内容保存并重新打开虚拟机</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smc.version = &quot;0&quot;</span><br><span class="line">cpuid.0.eax = &quot;0000:0000:0000:0000:0000:0000:0000:1011&quot;</span><br><span class="line">cpuid.0.ebx = &quot;0111:0101:0110:1110:0110:0101:0100:0111&quot;</span><br><span class="line">cpuid.0.ecx = &quot;0110:1100:0110:0101:0111:0100:0110:1110&quot;</span><br><span class="line">cpuid.0.edx = &quot;0100:1001:0110:0101:0110:1110:0110:1001&quot;</span><br><span class="line">cpuid.1.eax = &quot;0000:0000:0000:0001:0000:0110:0111:0001&quot;</span><br><span class="line">cpuid.1.ebx = &quot;0000:0010:0000:0001:0000:1000:0000:0000&quot;</span><br><span class="line">cpuid.1.ecx = &quot;1000:0010:1001:1000:0010:0010:0000:0011&quot;</span><br><span class="line">cpuid.1.edx = &quot;0000:1111:1010:1011:1111:1011:1111:1111&quot;</span><br><span class="line">featureCompat.enable = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="✅-这个虚拟机需要avx2，但是没有avx"><a href="#✅-这个虚拟机需要avx2，但是没有avx" class="headerlink" title="✅ 这个虚拟机需要avx2，但是没有avx"></a>✅ <strong>这个虚拟机需要avx2，但是没有avx</strong></h3><p>打开 vmx 文件，然后找到 virtualHW.version = “xx” ，将 xx 修改为 10，这个值代表的是兼容到哪个版本的 WVware。</p>
<h3 id="✅-启动后鼠标键盘无法移动"><a href="#✅-启动后鼠标键盘无法移动" class="headerlink" title="✅ 启动后鼠标键盘无法移动"></a>✅ 启动后鼠标键盘无法移动</h3><p>打开 vmx 文件，添加以下内容并修改虚拟机硬件配置中的 USB 配置器兼容性为 2.0，同时勾选 <strong>显示所有 USB 设备</strong></p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keyboard.vusb.enable = &quot;TRUE&quot;</span><br><span class="line">mouse.vusb.enable = &quot;TRUE&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="✅-无法安装-VMware-Tool"><a href="#✅-无法安装-VMware-Tool" class="headerlink" title="✅ 无法安装 VMware Tool"></a>✅ 无法安装 VMware Tool</h3><p>需要使用 darwin.iso 来安装，早期版本的 VMware 是自带的，后面一些版本没有，只能自己下载了，可以看一下参考链接 5，里面包含了下载链接。 </p>
<ol>
<li><p>安装前先将桌面右上角的磁盘退出，右键选中推出”Install macOS xxxx“。</p>
</li>
<li><p>下载后修改虚拟机硬件配置 CD/DVD 镜像为 darwin.iso 的路径，并勾选设备状态为已连接就可以正常安装了。</p>
</li>
<li><p>安装结束之后重启，然后从主机随便拖拽一个文件到虚拟机，这时候会让你进行 <strong>安全性与隐私</strong> 偏好设置，设置一下就行。</p>
</li>
</ol>
<h3 id="✅-无法全屏"><a href="#✅-无法全屏" class="headerlink" title="✅ 无法全屏"></a>✅ 无法全屏</h3><p>如果是 windows 和 linux ，在安装 VMware Tool 之后通常就自动铺满虚拟机了，而 macOS 麻烦点，并且需要虚拟机全屏才能触发 macOS 全屏。</p>
<ol>
<li>首先按照上面步骤安装 VMware Tool</li>
<li>打开 vmx 文件并添加 bios.forceSetupOnce = “TRUE” 来进入 bios</li>
<li>在 boot manager 界面中一次选择 Enter setip -&gt; Boot from a file -&gt; Recovery 【一串很长的名字】 -&gt; 【一串序列号】-&gt; boot.efi</li>
<li>进入到一个和安装时一样的界面，点击上面工具栏的实用工具-&gt;终端，输入 <strong>csrutil disable</strong> 来关闭 macOS 的 SIP 保护服务</li>
<li>之后输入 reboot 重启，并点击虚拟机上方工具栏的全屏模式，需要注意的是虚拟机退出全屏后 macOS 全屏也会失效。</li>
</ol>
<h3 id="📚-参考"><a href="#📚-参考" class="headerlink" title="📚 参考"></a>📚 参考</h3><ol>
<li><a href="https://zhuanlan.zhihu.com/p/337036027">全网最详细的VMware虚拟机安装MacOS系统教程，没有之一！！！附全部资源 - xuan yang的文章 - 知乎</a> </li>
<li><a href="https://blog.csdn.net/qq_31683775/article/details/120779678">黑苹果 dmg,cdr和iso的区别</a></li>
<li><a href="https://blog.csdn.net/silentbird520/article/details/96039415">AMD Vmware15 装 MaCOSX 10.14 报错# 客户机操作系统已禁用 CPU，请关闭或重置虚拟机</a></li>
<li><a href="https://blog.csdn.net/sunshine__sun/article/details/114674695">macos虚拟机鼠标不能移动和键盘不能使用</a></li>
<li><a href="https://crifan.github.io/popular_virtual_machine_vmware/website/usage_summary/vmware_tools/macos/darwin_iso.html">darwin.iso</a></li>
<li><a href="https://blog.csdn.net/weixin_40448001/article/details/116779835?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.highlightwordscore&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.highlightwordscore">虚拟机苹果macOS系统安装VMware Tools教程</a></li>
<li><a href="https://blog.csdn.net/cait_/article/details/89505022">详解：MacOS全屏显示，VMware Tools的安装与使用</a></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 配置</title>
    <url>/posts/11e1167/</url>
    <content><![CDATA[<p>早在 Windows Terminal 刚出来没多久有简单试用了一下，但是因为<del>懒惰</del>没空折腾，然后在前几天，本来我只是在从 npm 迁移到 pnpm 之后，因为觉得 pnpm 太长并且都是右手感觉手难受，于是设置一下 alias，但是不知道为什么始终只在 Windows Terminal 生效，而在 VSCode 里面的终端不生效（原因在下面），于是就顺手折腾了一下，顺便记录一些遇到的问题。（为什么别人安装那么顺利而我按照他们顺序就是有报错啊啊啊啊啊啊！！！）</p>
<span id="more"></span>

<h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p>首先当然是安装 Windows Terminal 了，系统自带的 Microsoft store 直接搜索并安装即可，或者访问<a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=zh-cn&gl=cn&rtc=1">网页版</a>跳转也行（因为之前不知道为什么把商店关了导致搜不到）。</p>
<p>Windows Terminal 是一个终端容器，以及提供了设置项的可视化面板，实际还是调用的其他终端。</p>
<p>通过上方横幅的向下的三角箭头可以打开终端设置，可以在这里进行可视化的修改，也可以通过左下角的 <code>settings.json</code> 来修改。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 默认配置</span></span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 配置列表</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                ...</span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell 7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 文字配色方案列表</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3024 Day&quot;</span><span class="punctuation">,</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="PowerShell-7-x"><a href="#PowerShell-7-x" class="headerlink" title="PowerShell 7.x"></a>PowerShell 7.x</h2><p>在这个 <a href="https://github.com/PowerShell/PowerShell/releases">Release</a> 页面根据需求选择安装包下载并安装。 </p>
<p>然后左下角菜单中找到 PowerShell 7，右键-以管理员身份打开。这里只是先创建 profile 文件并保存，后续才会用到。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后面统一使用 code 打开不在赘述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 获取路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$profile</span> <span class="comment"># 一般是 C:\Users\username\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打开路径</span></span><br><span class="line">notepad <span class="variable">$profile</span> <span class="comment"># 使用系统自带笔记本打开</span></span><br><span class="line">code <span class="variable">$profile</span> <span class="comment"># 或者使用 VSCode 打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 直接保存到 1 的那个路径里</span></span><br></pre></td></tr></table></figure>
<p>PS：系统自带了一个 Windows PowerShell，两者有关但并不等同，可以在系统中同时存在，具体可以参考 <a href="https://learn.microsoft.com/zh-cn/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2">Windows PowerShell 5.1 与 PowerShell 7.x 之间的差异</a>。</p>
<p>两者启动的程序以及启动配置的 <code>profile.ps1</code> 文件是不同的路径，我在开头提到的问题就是因为不清楚这一点，因此我在 Windows Terminal 中设置了 Windows PowerShell 的 <code>profile.ps1</code> 文件，但是在 VSCode 中配置的终端是 PowerShell 7.x。</p>
<p>Windows PowerShell，启动的程序是 <code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code>， PowerShell 7.x。启动的程序是 <code>C:\Program Files\PowerShell\7\pwsh.exe</code>，对应的配置文件一般是 exe 同根目录下创建的 <code>profile.ps1</code>，或者根据官网文档 <a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.4">PowerShell 7.4 about_Profiles</a>、<a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1">Windows PowerShell about_Profiles</a> 选择其他限定范围。</p>
<p>接下来打开 Windows Terminal 设置，找到 <em>添加新配置文件</em>，修改名称：PowerShell 7，命令行：<code>&quot;C:\Program Files\PowerShell\7\pwsh.exe&quot;</code>，图标：<code>ms-appx:///ProfileIcons/pwsh.png</code>，其他默认就行。</p>
<p>保存之后你应该就可以通过上方 <code>+</code> 来选择并打开 PowerShell 了。</p>
<h2 id="scoop-可选"><a href="#scoop-可选" class="headerlink" title="scoop(可选)"></a>scoop(可选)</h2><p><a href="https://scoop.sh/">scoop</a> 是命令行的程序安装工具，我们用来安装 <code>Oh My Posh</code> 的，也可以使用 <code>winget</code>，或者 PowerShell 自带的 <code>cmdlet</code>，但是这两个有一些问题，<code>winget</code> 我在系统商店安装之后依然没法使用，使用 github 的安装包安装会提示被限制安装失败。而 <code>cmdlet</code> 貌似有兼容性问题，并且需要手动设置环境变量。</p>
<p>打开 PowerShell 通过以下命令安装 <code>scoop</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser <span class="comment"># Optional: Needed to run a remote script the first time</span></span><br><span class="line">irm get.scoop.sh | iex</span><br></pre></td></tr></table></figure>

<h2 id="On-My-Post"><a href="#On-My-Post" class="headerlink" title="On My Post"></a>On My Post</h2><blockquote>
<p>Oh My Posh is a custom prompt engine for any shell that has the ability to adjust the prompt string with a function or variable.</p>
</blockquote>
<p>简单说可以让你有输入提示，并且可以配置主题，字体等内容。在 PowerShell 通过以下命令安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>

<p>安装结束之后复制以下内容并粘贴到刚刚创建的配置文件当中，主题可以在 <a href="https://ohmyposh.dev/docs/themes">Themes</a> 选择，替换名称即可。profile 文件会在终端启动后加载执行，否则我们就需要每次都手动设置一次才可以使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过修改 themeName 来切换主题</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\themeName.omp.json&quot;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure>

<p>此时重启 PowerShell 你应该就可以看到对应主题内容了，并且对于你曾经输过的命令，你只需要输入前几个字母，后面会有浅色气体提示，你按一下右方向键就会自动填充。</p>
<p>PS：部分主题使用了字体图标，因此会导致乱码，解决办法就是下一步的字体安装，但也有一些主题没有用到字体图标，那么使用任意字体都行。</p>
<h2 id="Font-可选"><a href="#Font-可选" class="headerlink" title="Font(可选)"></a>Font(可选)</h2><p><code>On My Post</code> 的许多主题都是用了字体图标来显得更加美观，为了使这些带图标的主题可用，就需要安装 <a href="https://www.nerdfonts.com/font-downloads">Nert Font</a>，在 <code>On My Post</code> 的文档中是使用命令行安装，但在我这里不知道什么原因，不管挂没挂梯子都会超时，因此推荐在 <a href="https://www.nerdfonts.com/font-downloads">font-download</a> 直接下载压缩包。</p>
<p>可以在 <a href="https://www.programmingfonts.org/">programming fonts</a> 预览这些字体的实际效果。压缩包解压会看到一堆的 <code>ttf</code> 字体文件，加粗、斜体等等，选择带有 <code>Nert Font</code> 的其中一个安装即可。</p>
<p>打开 Windows Terminal 设置，选择配置 PowerShell，拉到下面的 <em>外观</em>，然后修改字体为刚刚安装的字体保存后马上生效。</p>
<p>PS：如果不使用带图标主题，可以选择任意字体，或者自行安装其他字体文件。</p>
<h2 id="Font-Color-可选"><a href="#Font-Color-可选" class="headerlink" title="Font Color(可选)"></a>Font Color(可选)</h2><p>配色方案是用来修改字体颜色的，我们可以基于 Windows Terminal 提供的默认方案自行修改，或者使用现成的方案。</p>
<p><a href="https://windowsterminalthemes.dev/">Windows Terminal Themes</a> 当中有许多的配色方案可选，你可以预览后选择一个选择 ‘Get theme’，这会将配色方案复制到剪贴板。</p>
<p>打开 Windows Terminal 设置，左下角点击 <em>打开 JSON 文件</em>，此时打开的是 <code>settings.json</code>，将上面已经复制的配色方案粘贴到 <code>schemes</code> 的数组中。</p>
<p>或者拉到下面的 <code>Download .json of themes</code> 来下载全部配色，然后全部粘贴到 <code>schemes</code> 当中。接着就可以在外观中选择这些配色方案了。</p>
<h2 id="gsudo-可选"><a href="#gsudo-可选" class="headerlink" title="gsudo(可选)"></a>gsudo(可选)</h2><p>Windows Terminal 默认是没有管理员权限，为了解决这个问题可以使用 <a href="https://gerardog.github.io/gsudo/">gsudo</a>，通过以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop install gsudo</span><br></pre></td></tr></table></figure>

<p>然后打开 Windows Terminal 设置-添加新配置文件-复制配置文件-下拉选择PowerShell-点击复制。然后将名字修改为 <code>PowerShell Plus</code> 或者其他有所区分的名称，然后修改该配置的命令行为：<code>gsudo.exe pwsh.exe -nologo</code>。(-nologo 用于关闭 PowerShell 的更新检查，否则如果有新版本会一直弹出更新提示)</p>
<p>这时候你就能通过下拉菜单的 <code>PowerShell Plus</code> 来打开管理员权限的终端，也可以将该配置设为默认终端。此时标签名称为 <code>Administrator：PowerShell Plus</code> 表示管理员权限。</p>
<h2 id="VSCode-可选"><a href="#VSCode-可选" class="headerlink" title="VSCode(可选)"></a>VSCode(可选)</h2><p>作为个人常用 IDE，自然也有必要添加配置。打开文件-首选项-配置文件(默认)-显示内容，然后选择左边的 <code>settings.json</code> 打开，添加下面内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 添加 PowerShell 配置项</span></span><br><span class="line">        <span class="attr">&quot;PowerShell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminal-powershell&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置默认终端为 PowerShell</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>此时打开终端应该可以看到和 Windows Terminal 相同效果。</p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>Windows Terminal 本身还有其他内置外观修改可以自行探索：</p>
<ul>
<li>复古风格终端效果</li>
<li>光标形状</li>
<li>【强烈推荐使用】毛玻璃特效(enable acrylic) 和不透明度(建议 0.7-0.9)。</li>
<li>背景图</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=zh-cn&gl=cn&rtc=1">Microsoft store</a></li>
<li><a href="https://github.com/PowerShell/PowerShell/releases">PowerShell Release</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2">Windows PowerShell 5.1 与 PowerShell 7.x 之间的差异</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.4">PowerShell 7.4 about_Profiles</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1">Windows PowerShell about_Profiles</a></li>
<li><a href="https://scoop.sh/">scoop</a></li>
<li><a href="https://ohmyposh.dev/docs/themes">oh my posh - Themes</a></li>
<li><a href="https://www.nerdfonts.com/font-downloads">Nert Font</a></li>
<li><a href="https://www.programmingfonts.org/">programming fonts</a></li>
<li><a href="https://windowsterminalthemes.dev/">Windows Terminal Themes</a></li>
<li><a href="https://gerardog.github.io/gsudo/">gsudo</a></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Theme</tag>
        <tag>Font</tag>
        <tag>Windows Terminal</tag>
      </tags>
  </entry>
</search>
